.\" Copyright © 1998       James Troup <james@nocrew.org>
.\" Copyright © 2005-2009  Roger Leigh <rleigh@debian.org>
.\" Copyright © 2008       Simon McVittie <smcv@debian.org>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see
.\" <http://www.gnu.org/licenses/>.
.so defs.man
.TH SBUILD 1 "\*[RELEASE_DATE]" "Version \*[VERSION]" "Debian sbuild"
.SH NAME
sbuild \- build debian packages from source
.SH SYNOPSIS
.B sbuild
.RB [ \-h \[or] \-\-help " \[or] " \-V \[or] \-\-version ]
.RB [ \-v \[or] \-\-verbose " \[or] " \-q \[or] \-\-quiet ]
.RB [ \-D \[or] \-\-debug ]
.RB [ \-A \[or] \-\-arch\-all ]
.RB [ \-\-archive=\fIarchive\fP ]
.RB [ \-d \[or] \-\-dist=\fIdistribution\fP ]
.RB [ \-c \[or] \-\-chroot=\fIchroot\fP ]
.RB [ \-\-arch=\fIarchitecture\fP ]
.RB [ \-\-build=\fIarchitecture\fP ]
.RB [ \-\-host=\fIarchitecture\fP ]
.RB [ \-s \[or] \-\-source ]
.RB [ \-\-force\-orig\-source ]
.RB [ \-\-make\-binNMU=\fIchangelog-entry\fP ]
.RB [ \-\-binNMU=\fINMU-version\fP ]
.RB [ \-\-append\-to\-version=\fIstring\fP ]
.RB [ \-\-add-depends=\fIdependency\fP ]
.RB [ \-\-add-conflicts=\fIdependency\fP ]
.RB [ \-\-add-depends\-arch=\fIdependency\fP ]
.RB [ \-\-add-conflicts\-arch=\fIdependency\fP ]
.RB [ \-\-add-depends\-indep=\fIdependency\fP ]
.RB [ \-\-add-conflicts\-indep=\fIdependency\fP ]
.RB [ \-m \[or] \-\-maintainer=\fImaintainer\fP ]
.RB [ \-e \[or] \-\-uploader=\fIuploader\fP ]
.RB [ \-k \[or] \-\-keyid=\fIkey-id\fP ]
.RB [ \-j \[or] \-\-jobs=\fIn\fP ]
.RB [ \-\-debbuildopt=\fIoption\fP ]
.RB [ \-\-debbuildopts=\fIoptions\fP ]
.RB [ \-\-dpkg-source-opt=\fIoptions\fP ]
.RB [ \-\-dpkg-source-opts=\fIoptions\fP ]
.RB [ \-p \[or] \-\-purge=\fPpurge-mode\fP ]
.RB [ \-\-purge\-build=\fPpurge-mode\fP ]
.RB [ \-\-purge\-deps=\fPpurge-mode\fP ]
.RB [ \-\-purge\-session=\fPpurge-mode\fP ]
.RB [ \-b \[or] \-\-batch]
.RB [ \-n \[or] \-\-nolog ]
.RB [ \-\-run\-lintian ]
.RB [ \-\-no\-run\-lintian ]
.RB [ \-\-lintian\-opt=\fIoptions\fP ]
.RB [ \-\-lintian\-opts=\fIoptions\fP ]
.RB [ \-\-run\-piuparts ]
.RB [ \-\-no-run\-piuparts ]
.RB [ \-\-piuparts\-opt=\fIoptions\fP ]
.RB [ \-\-piuparts\-opts=\fIoptions\fP ]
.RB [ \-\-piuparts\-root\-arg=\fIoptions\fP ]
.RB [ \-\-piuparts\-root\-args=\fIoptions\fP ]
.RB [ \-\-pre\-build\-commands=\fIstring\fP ]
.RB [ \-\-chroot\-setup\-commands=\fIstring\fP ]
.RB [ \-\-chroot\-cleanup\-commands=\fIstring\fP ]
.RB [ \-\-post\-build\-commands=\fIstring\fP ]
.RB [ \-\-log\-external\-command\-output ]
.RB [ \-\-log\-external\-command\-error ]
.RB [ \-\-setup\-hook=\fIhook-script\fP ]
.RB [ \-\-build\-dep\-resolver=\fIresolver\fP ]
.RB [ \-\-resolve\-alternatives \[or] \-\-no\-resolve\-alternatives ]
.RB [ \-\-extra\-package=\fIpackage.deb\fP ]
.RB [ \-\-extra\-repository=\fIspec\fP ]
.RB [ PACKAGE [ .dsc ]]
.SH DESCRIPTION
\fBsbuild\fR rebuilds Debian binary packages from the corresponding Debian
source, installing any missing source dependencies.  The build takes place in a
dedicated clean build environment (chroot), rather than on the host system.
.PP
\fBsbuild\fR can fetch the Debian source over a network, or it can use
locally available sources.
.PP
sbuild is given a packages to process as the argument
\fBPACKAGE[.dsc]\fR.  This argument is in the form of either a
debianized package source directory, a source package name along with a
version in the form \fIpackage_version\fP, or a .dsc file. If no arguments are
given, the current working directory is passed as an argument.
.PP
For arguments given as source directories, dpkg-source is first run to produce a
source .dsc file. Then, the package is built using the .dsc produced. For
arguments in the form \fIpackage_version\fP, apt is used to download the source
package. For arguments given as a .dsc file, sbuild builds the source packages
directly. For .dsc files in remote locations, the source packages are downloaded
first, then built.
.PP
It is also possible to run external commands with sbuild. See the section
\fBEXTERNAL COMMANDS\fR for more on this.
.PP
\fBsbuild\fR mails the build logs to a user.  It is configured by the
configuration files \fI/etc/sbuild/sbuild.conf\fP and \fI~/.sbuildrc\fP.  An
example sbuildrc is available in
\fI/usr/share/doc/sbuild/examples/example.sbuildrc\fP.
.PP
You can build either using a local package with its .dsc file or a
remote one by specifying an explicit dpkg version.
.PP
Note: When using schroot (recommended), the chroot having the name (or alias)
of the specified distribution will be used; schroot uses a chroot named
\fI$distribution\-$arch-sbuild\fP, \fI$distribution\-sbuild\fP,
\fI$distribution\-$arch\fP or \fI$distribution\fP, in that order of preference.
The \-c or \-\-chroot option may be used to override the chroot to be
used. When configured to use sudo (deprecated), sbuild will look for a symlink
to a chroot with the same name as the distribution specified.  sbuild will use
a symlink to the chroot located in \fI/etc/sbuild/chroot/$distribution\fP, or
must be run in a directory containing a \fIchroot\-$distribution\fP symlink to
the chroot (not recommended, but done for backward compatibility).
.SH OPTIONS
.TP
.BR \-h ", " \-\-help
Display this manual.
.TP
.BR \-V ", " \-\-version
Print version information.
.TP
.BR "\-\-add\-depends=\fIdependency\fP"
.TP
.BR "\-\-add\-conflicts=\fIdependency\fP"
.TP
.BR "\-\-add\-depends\-arch=\fIdependency\fP"
.TP
.BR "\-\-add\-conflicts\-arch=\fIdependency\fP"
.TP
.BR "\-\-add\-depends\-indep=\fIdependency\fP"
.TP
.BR "\-\-add\-conflicts\-indep=\fIdependency\fP"
These options add a build dependencies to the source package being built, in
addition to the build dependency information specified in debian/control.
These dependencies will be concatenated directly to the Build-Depends,
Build-Conflicts, Build-Depends-Arch, Build-Conflicts-Arch, Build-Depends-Indep
and Build-Conflicts-Indep dependencies, respectively.  The options may be used
any number of times to add multiple dependencies.  The format is identical to
the format used in debian/control.
.TP
.BR "\-\-arch=\fIarchitecture\fP"
Build using the architecture specified.  A chroot named
\fI$distribution\-$arch-sbuild\fP or \fI$distribution\-arch\fP is searched for,
in that order of preference.  The chroot must be installed and configured
appropriately to build as that architecture, e.g. using
\fIpersonality=linux32\fP to build i386 packages on an amd64 system.  Note that
this option is equivalent to "\-\-host=architecture \-\-build=architecture".
.TP
.BR "\-\-host=\fIarchitecture\fP"
Build using the host architecture specified.  If $host and $build don't match, a
chroot named \fI$distribution\-$build\-$host\-sbuild\fP or \fI$distribution\-$build\-$host\fP
is searched for, falling back to \fI$distribution\-$host\-sbuild\fP or
\fI$distribution\-$host\fP, in that order of preference.  This option is only
useful for cross-building when used together with \-\-build.
.TP
.BR "\-\-build=\fIarchitecture\fP"
Build using the build architecture specified.  This option is only useful for
cross-building when used together with \-\-host.  If \-\-build is not specified,
the default system architecture is assumed.
.TP
.BR \-A ", " "\-\-arch\-all"
Also build Architecture: all packages, i.e. use dpkg\-buildpackage \-b
instead of \-B.
.TP
.BR "\-\-no\-arch\-all"
Do not build Architecture: all packages, i.e. use dpkg\-buildpackage -B
instead of \-b. This option is the opposite of \-\-arch\-all.
.TP
.BR \-b ", " "\-\-batch"
Operate in batchmode, i.e. write a build-progress file during execution
and files on shutdown to facilitate a clean restart.
.TP
.BR \-c ", " "\-\-chroot=\fIchroot\fP"
Use the specified chroot. If not specified, the default is the first of
\fI$distribution\-$arch\-sbuild\fP, \fI$distribution\-sbuild\fP,
\fI$distribution\-$arch\fP or \fI$distribution\fP that exists.
.TP
.BR \-d ", " "\-\-dist=\fIdistribution\fP"
Fetch source packages from specified distribution.
.TP
.BR \-\-archive=\fIarchive\fP
Communicate with specified archive.
.TP
.BR \-D ", " "\-\-debug"
Enable debug output.
.TP
.BR "\-\-apt\-clean"
.TQ
.BR "\-\-no\-apt\-clean"
Run (or do not run) apt-get clean in the chroot before executing the build,
overriding the default setting.
.TP
.BR "\-\-apt\-update"
.TQ
.BR "\-\-no\-apt\-update"
Run (or do not run) apt-get update in the chroot before executing the build,
overriding the default setting.
.TP
.BR "\-\-apt\-upgrade"
.TQ
.BR "\-\-no\-apt\-upgrade"
Run (or do not run) apt-get upgrade in the chroot before executing the build,
overriding the default setting.
.TP
.BR "\-\-apt\-distupgrade"
.TQ
.BR "\-\-no\-apt\-distupgrade"
Run (or do not run) apt-get distupgrade in the chroot before executing the build,
overriding the default setting.
.TP
.BR \-m ", " "\-\-maintainer=\fImaintainer\fP"
Specify the identity to use for GPG signing packages, and also used as the
maintainer for binary NMUs.  This does not normally require setting (it
defaults to the uploader).
.TP
.BR \-e ", " "\-\-uploader=\fIuploader\fP"
Passed to dpkg\-genchanges and is used to set the Changed\-by: field in
the .changes file(s).
.TP
.BR \-k ", " "\-\-keyid=\fIkey-id\fP"
Passed to dpkg\-genchanges and is used to set the key to sign the .changes
file(s).  Default is not using any key.
.TP
.BR \-j ", " "\-\-jobs=\fIn\fP"
Number of jobs to run simultaneously.  Passed through to dpkg\-buildpackage.
.TP
.BR \-\-debbuildopt=\fIoption\fP
Pass the specified option directly to dpkg\-buildpackage.
.TP
.BR \-\-debbuildopts=\fIoptions\fP
Pass the specified options directly to dpkg\-buildpackage.  The options should
be separated by spaces.  If any options contain spaces, use \-\-debbuildopt
instead.
.TP
.BR \-\-dpkg\-source\-opt=\fIoptions\fP
Pass the specified options directly to dpkg-source. This is only used when
creating a source package from a Debianized source directory.
.br
\fBNOTE:\fR The '\fI-b\fP' option will always be passed to dpkg-source.
.TP
.BR \-\-dpkg\-source\-opts=\fIoptions\fP
Extra options to be appended to existing options passed to dpkg-source.
.TP
.BR "\-\-mail\-log\-to=\fIemail-address\fP"
Send the build log to the specified email address.  This overrides the
\fI$mailto\fP configuration option.
.TP
.BR \-n ", " "\-\-nolog"
Do not create a package log file in the \fI$log_dir\fP directory and no build
log file, but print everything to stdout. Also do not send any log mails.
.TP
.BR \-p ", " "\-\-purge=\fIpurge-mode\fP"
Convenience option to set \fIpurge-mode\fR for build directory, build
dependencies and session.
.TP
.BR "\-\-purge\-build=\fIpurge-mode\fP"
\fIpurge-mode\fR determines if the build directory will be deleted after a
build. Possible values are \fBalways\fR (default), \fBnever\fR, and
\fBsuccessful\fR.
.TP
.BR "\-\-purge\-deps=\fIpurge-mode\fP"
\fIpurge-mode\fR determines if the build dependencies will be removed after a
build. Possible values are \fBalways\fR (default), \fBnever\fR, and
\fBsuccessful\fR.
.TP
.BR "\-\-purge\-session=\fIpurge-mode\fP"
Purge the schroot session following a build.  This is useful in conjunction
with the \fI\-\-purge\-build\fP and \fI\-\-purge\-deps\fP options when using
snapshot chroots, since by default the snapshot will be deleted.  Possible
values are \fBalways\fR (default), \fBnever\fR, and \fBsuccessful\fR.
.TP
.BR \-s ", " "\-\-source"
Also build source package, i.e. use dpkg\-buildpackage without \-B.
.TP
.BR "\-\-no-source"
Don't build source package, i.e. use dpkg\-buildpackage with \-B.  This option
is the opposite of \-\-source.
.TP
.BR "\-\-force\-orig\-source"
When used with in conjunction with \-s, this option forces the inclusion of the
orig.tar.gz file in the generated .changes file, even in cases where it would
not normally be included, i.e. use dpkg\-buildpackage \-sa.
.TP
.BR "\-\-use\-snapshot"
Installs the latest snapshot gcc compiler from the \fIgcc-snapshot\fP package,
and alters the build environment to use the snapshot compiler for the build.
.TP
.BR \-v ", " "\-\-verbose"
Be verbose, i.e. all information goes to stdout as well as to the log files.
.TP
.BR \-q ", " "\-\-quiet"
Be quiet.  This is the opposite of \-\-verbose.
.TP
.BR "\-\-make\-binNMU=\fIchangelog-entry\fP"
With this option, \fBsbuild\fR will create a new changelog entry in
debian/changelog of every package built. The version number will be in the
format for binary-only NMUs (see \-\-binNMU); the maintainer is set to the
maintainer name configured for \fBsbuild\fR. \fIchangelog-entry\fR will be used
as the changelog entry following \[lq]Binary-only non-maintainer upload for
ARCH -- no source changes\[rq]. Please note that the versions in the
\fIPACKAGE_VERSION[.dsc]\fR arguments still have to be the unmodified (non-NMU
ones) so that the sources can be found. The version number in log files and
mails will be modified by \fBsbuild\fR automatically.
.TP
.BR "\-\-binNMU=\fINMU-version\fP"
The version number of the binary NMU.  This should be used in conjunction with
\-\-make\-binNMU.  \fIversion\fP is a single number for the (+b\fIn\fR) format
used for binary NMUs.
.TP
.BR "\-\-append\-to\-version=\fIstring\fP"
This option is similar to --make-binNMU except that it allows the user to
specify an arbitrary string to be appended to the version number (immediately
before the '+' in the Debian revision if --make-binNMU is also provided).
.TP
.BR \-\-run\-lintian
Run lintian after a successful build.
.TP
.BR \-\-no\-run\-lintian
Don't run lintian after a successful build.  If sbuild is configured to run
lintian by default, this option will prevent lintian being run.
.TP
.BR \-\-lintian\-opt=\fIoptions\fP
Run lintian with the specified options.
.TP
.BR \-\-lintian\-opts=\fIoptions\fP
Append extra options to existing options passed to lintian.
.TP
.BR \-\-run\-piuparts
Run piuparts after a successful build.
.TP
.BR \-\-no\-run\-piuparts
Don't run piuparts after a successful build.  If sbuild is configured to run
piuparts by default, this option will prevent piuparts being run.
.TP
.BR \-\-piuparts\-opt=\fIoptions\fP
Run piuparts with the specified options.
.TP
.BR \-\-piuparts\-opts=\fIoptions\fP
Append extra options to existing options passed to piuparts.
.TP
.BR \-\-piuparts\-root\-arg=\fIoptions\fP
Add an argument that is used to launch piuparts as root. If no arguments are
specified, piuparts will be launched via sudo.
.TP
.BR \-\-piuparts\-root\-args=\fIoptions\fP
Add arguments that are used to launch piuparts as root. If no arguments are
specified, piuparts will be launched via sudo.
.TP
.BR \-\-pre\-build\-commands=\fIstring\fP
Run this command before a build starts. This option can be used multiple times
to add multiple commands.
.TP
.BR \-\-chroot\-setup\-commands=\fIstring\fP
Run these commands when a chroot is setup, before deps are installed. This
option can be used multiple times to add multiple commands.
.TP
.BR \-\-chroot\-cleanup\-commands=\fIstring\fP
Run these commands when a chroot is cleaned up, before build directory is
purged. This option can be used multiple times to add multiple commands.
.TP
.BR \-\-post\-build\-commands=\fIstring\fP
Run this command after a successful build. This option can be used multiple
times to add multiple commands.
.TP
.BR \-\-log\-external\-command\-output
Write output from external commands to the build log.
.TP
.BR \-\-log\-external\-command\-error
Write error output from external commands to the build log.
.TP
.BR "\-\-setup\-hook=\fIhook-script\fP" " " \fBDEPRECATED\fP
This option is deprecated. Use of this option will add \fIhook-script\fP to the
external commands to run via \fIchroot-setup-commands\fP.
.TP
.BR "\-\-build\-dep\-resolver=\fIresolver\fP"
Use the specified resolver to handle selecting the build dependencies.
Supported resolvers are \fIapt\fP (the default), \fIaptitude\fP and \fIxapt\fP.
The apt resolver is the most appropriate resolver for most users, for building
for unstable, stable and other distributions.  If alternative build
dependencies are used (excluding architecture restrictions), only the first
alternative will be used; the others will be ignored.  The aptitude resolver is
very similar, but smarter and slower, and it will consider all alternatives by
default; it is suited to more complex situations, such as building packages for
the experimental distribution, where packages need installing from multiple
suites (\fIunstable\fP and \fIexperimental\fP).  Due to performance and other
issues (bug #139615), aptitude is not recommended for use by default.  The xapt
resolver is intended only for cross-building, and is a temporary transitional
feature which will be removed following the complete introduction of multi-arch
support.
.TP
.BR \-\-resolve\-alternatives
Allow the use of alternatives in Build-Depends, Build-Depends-Arch and
Build-Depends-Indep.  This is the default for the aptitude dependency resolver.
.TP
.BR \-\-no\-resolve\-alternatives
Do not allow the use of alternatives in Build-Depends, Build-Depends-Arch and
Build-Depends-Indep.  Note that alternatives for the same package
(e.g. different versions) are still allowed.  This is the default for the
apt and xapt dependency resolvers.
.TP
.BR \-\-extra\-package=\fIpackage.deb\fP
Make \fIpackage.deb\fP available for build-dependency resolution, by
adding it to a temporary archive created by sbuild.  This makes it
easier to build packages against locally-built build depenencies,
without waiting for those packages to enter the main archive, or going
through the hassle of maintaining a local archive and making it
accessible inside the chroot.  \fIpackage.deb\fP is copied into the
chroot, so it can refer to any path on the host system.
.TP
.BR \-\-extra\-repository=\fIspec\fP
Add a repository to the list of apt sources during the package build.
The repository specification is a line suitable for an apt
.BR sources.list (5)
file. For instance, you might use
.nh
.B \-\-extra\-repository="deb http://ftp.debian.org/debian experimental main"
.hy
to allow packages in the experimental distribution to fulfill
build-dependencies. Note that the build chroot must already trust the
key of this repository (see
.BR apt-secure (8)).
.SH EXTERNAL COMMANDS
Support to run external commands during an sbuild run is provided. A set of
external commands can be run at various stages of a build. Providing commands to
run is done through the appropriate options given on the command line and
through the use of the configuration files. In the configuration file, the list
of commands to run are placed in a hash of arrays of arrays of strings
corresponding to the commands to run.
.PP
Here's an example of how to edit the configuration files to run "foo" and "bar"
with arguments before a build starts.
.PP
\f[CB]$external_commands = {\fP
.br
\f[CB]    "pre-build-commands" => [\fP
.br
\f[CB]        ['foo', 'arg1', 'arg2'],\fP
.br
\f[CB]        ['bar', 'arg1', 'arg2', 'arg3'],\fP
.br
\f[CB]    ],
.br
\f[CB]};\fP
.PP
Hash keys for commands to run at other stages have the same name as their
corresponding command-line option name without the preceding '--'.
.PP
Here's an example of how to do the same with the previous example, except using
the \fI\-\-pre\-build\-commands\fP option.
.PP
\f[CB]$ sbuild \\\fP
.br
\f[CB]      \-\-pre\-build\-commands='foo arg1 arg2' \\\fP
.br
\f[CB]      \-\-pre\-build\-commands='bar arg1 arg2 arg3'\fP
.PP
Besides running external commands, sbuild can also detect the use of certain
percent escapes given as arguments. These are used to allow for a command to be
supplied with a certain argument depending on the escape given.
For example, it could be possible to have an external command be given the
path to a .changes file.
.PP
Here is a listing of keywords and a description of what it's converted to.
.TP
\fB%%\fR
Used to escape a '\fI%\fP'.
.TP
\fB%d\fR, \fB%SBUILD_DSC\fR
These escapes are converted to the absolute path to a package's .dsc file.
.TP
\fB%c\fR, \fB%SBUILD_CHANGES\fR
These escapes are converted to the absolute path to a package's source .changes
file.
.PP
Percent escapes are only substituted when an appropriate value is defined for
them. At other times, it is left unchanged. For example, a .changes file is only
defined at the end of a build, so using \fI%c\fR will only be substituted for
post-build-commands.
.PP
Here's an example of using an escape to run a program foo on a .changes file
after a build is done.
.PP
\f[CB]$ sbuild \-\-post\-build\-commands \\\fP
.br
\f[CB]      'foo %SBUILD_CHANGES'\fP
.PP
One final note, external commands are processed in the order they are given.
Also, the commands given in a configuration file are processed first, then the
commands given through the command line options.
.SH LOCAL ARCHIVE
The apt and aptitude resolvers create a local archive for installing build
dependencies.  This is an internal implementation detail of the build
dependency resolver, which is not user configurable, and is indended to be
entirely transparent to the user.  The local archive exists only transiently
during the package build.  It does not persist across builds, and it is only
used to store the dummy dependency packages created for a single build.
.PP
The dependency resolvers do the following:
.IP \[bu]
Create a dummy dependency package.  This contains the Build-Depends (and
optionally Build-Depends-Arch and Build-Depends-Indep) as Depends, and
Build-Conflicts (and optionally Build-Conflicts-Arch and Build-Conflicts-Indep)
as Conflicts.
.IP \[bu]
Install the dummy dependency package into the local archive,
.IP \[bu]
Generate the \fIPackages\fP, \fISources\fP and \fIRelease\fP files.
.IP \[bu]
Write a \fIsources.list\fP file for the local archive into
\fI/etc/apt/sources.list.d\fP.
.IP \[bu]
Inject the lists directly into \fI/var/lib/apt/lists\fP.  This step is to save
running updating all apt sources which is undesirable during a build; apt and
aptitude do not support updating a single source at present.
.IP \[bu]
Regenerate the apt caches to ensure everything is in sync.
.IP \[bu]
Install the dummy dependency package with apt or aptitude; the dummy package is
pulled from the local apt archive, while all its dependencies are pulled from
the regular configured apt sources.
.PP
At the end of the build, the local archive is removed, along with the rest of
the build tree.
.SH ENVIRONMENT VARIABLES
The following environment variables are used by \fBsbuild\fR:
.IP "HOME"
The home directory of the user.
.IP "LOGNAME"
Used in lockfiles.
.SH FILES
.TP
.I /etc/sbuild/sbuild.conf
Configuration, maintained by the system administrator.  This may be used to
override the defaults.
.TP
.I /etc/sbuild/chroot
Directory containing symbolic links to chroots.  This is only used for sudo
chroot access; schroot access uses the schroot chroot configuration.
.TP
.I ~/.sbuildrc
User-specific configuration.
.TP
.I /var/lib/sbuild
Build trees, archive signing keys, build statistics and lock files.
.SH AUTHORS
Roman Hodek <Roman.Hodek@informatik.uni\-erlangen.de>.
.PP
\fBsbuild\fR is based on debbuild, written by James Troup
<james@nocrew.org> and has been modified by
.nf
Ben Collins <bcollins@debian.org>,
Ryan Murray <rmurray@debian.org>,
Francesco Paolo Lovergine <frankie@debian.org>,
Michael Banck <mbanck@debian.org>, and
Roger Leigh <rleigh@debian.org>
.fi
.SH COPYRIGHT
.nf
Copyright \[co] 1998-2000 Roman Hodek <roman\@hodek.net>
Copyright \[co] 1998-1999 James Troup <troup\@debian.org>
Copyright \[co] 2003-2006 Ryan Murray <rmurray\@debian.org>
Copyright \[co] 2001-2003 Rick Younie <younie\@debian.org>
Copyright \[co] 2003-2004 Francesco Paolo Lovergine <frankie\@debian.org>
Copyright \[co] 2005      Michael Banck <mbanck\@debian.org>
Copyright \[co] 2005-2009 Roger Leigh <rleigh\@debian.org>
.fi
.SH "SEE ALSO"
.BR sbuild.conf (5),
.BR sbuild\-abort (1),
.BR sbuild\-adduser (8),
.BR sbuild\-apt (1),
.BR sbuild\-checkpackages (1),
.BR sbuild\-createchroot (8),
.BR sbuild\-distupgrade (1),
.BR sbuild\-hold (1),
.BR sbuild\-setup (7).
.BR sbuild\-shell (1),
.BR sbuild\-unhold (1),
.BR sbuild\-update (1),
.BR sbuild\-upgrade (1),
.BR schroot (1),
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
